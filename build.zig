const std = @import("std");

pub fn build(b: *std.Build) !void {
    const optimize = b.standardOptimizeOption(.{});
    const target = std.zig.CrossTarget{
        .cpu_arch = .x86,
        .cpu_model = .{ .explicit = &std.Target.x86.cpu.x86_64_v3 },
        .os_tag = .windows,
        .abi = .msvc,
    };
    const use_llvm = true;
    const use_lld = true;

    // TODO: Remove `skip_dll_export`.
    const skip_dll_export = b.option(bool, "skip_dll_export", "Skip verifying that DllExport members match what is expected") orelse true;
    const hardcoded_xml = b.option(bool, "hardcoded_xml", "Hardcode XML values into the DLL to allow more optimization opportunities") orelse false;
    const sanitize = b.option(bool, "sanitize", "Enable UBSan") orelse false;
    const final_release = b.option(bool, "final_release", "Remove debugging instruments that should not be present in a release build.") orelse false;
    const profiling = b.option(bool, "enable_profiling", "Enable profiling instrumentation") orelse false;
    const oos_logging = b.option(bool, "oos_logging", "Enable OOS logging") orelse false;
    const emit_compdb = b.option(bool, "compdb", "Emit compile_commands.json for IDE integration") orelse false;

    b.dest_dir = b.build_root.path.?;
    b.lib_dir = "./Assets";

    // TODO: Set up final release workflow

    // TODO: Create custom step for codegen scripts to integrate with `std.Build.Cache`.

    // TODO: Rewrite DllExport verification script in Zig.
    const perl_dll_export = b.addSystemCommand(&.{ "perl", "-X", "./bin/DllExport.pl", "./DLLSources" });
    perl_dll_export.cwd = "./Project Files";
    perl_dll_export.has_side_effects = true;
    perl_dll_export.setName("DllExport.pl");

    const perl_xml_validation = b.addSystemCommand(&.{ "perl", "./bin/xml_validation.pl" });
    perl_xml_validation.cwd = "./Project Files";
    perl_xml_validation.has_side_effects = true;
    perl_xml_validation.setName("xml_validation.pl");

    // TODO: Replace with Zig script to check for newline at end of each file
    const perl_cpp_line_checker = b.addSystemCommand(&.{ "perl", "./bin/CPP_line_checker.pl" });
    perl_cpp_line_checker.cwd = "./Project Files";
    perl_cpp_line_checker.has_side_effects = true;
    perl_cpp_line_checker.setName("CPP_line_checker.pl");

    const perl_xml_enum_global_types = b.addSystemCommand(&.{ "perl", "./bin/xml_enum_global_types.pl" });
    perl_xml_enum_global_types.cwd = "./Project Files";
    perl_xml_enum_global_types.has_side_effects = true;
    perl_xml_enum_global_types.setName("xml_enum_global_types.pl");

    const perl_xml_enum_gen = b.addSystemCommand(&.{ "perl", "./bin/xml_enum_gen.pl" });
    perl_xml_enum_gen.cwd = "./Project Files";
    perl_xml_enum_gen.has_side_effects = true;
    perl_xml_enum_gen.setName("xml_enum_gen.pl");

    const perl_variable_setup = b.addSystemCommand(&.{ "perl", "./bin/variable_setup.pl" });
    perl_variable_setup.cwd = "./Project Files";
    perl_variable_setup.has_side_effects = true;
    perl_variable_setup.setName("variable_setup.pl");

    // TODO: Clean up build scripts
    const git_rev_parse = b.addSystemCommand(&.{ "git", "rev-parse", "HEAD" });
    const git_version = b.addExecutable(.{
        .name = "git_version",
        .root_source_file = .{ .path = "./Project Files/bin/git_version.zig" },
        .optimize = .ReleaseSafe,
    });

    const auto_git_version = b.addRunArtifact(git_version);
    auto_git_version.addFileSourceArg(git_rev_parse.captureStdOut());
    auto_git_version.extra_file_dependencies = dll_sources; // TODO: Add XML files and build scripts?
    auto_git_version.has_side_effects = false;

    const generate_auto_git_version_h = b.addWriteFiles();
    generate_auto_git_version_h.addCopyFileToSource(auto_git_version.captureStdOut(), "./Project Files/DLLSources/autogenerated/AutoGitVersion.h");

    // TODO: Move all autogenerated sources into include path

    const perl = b.step("perl", "Execute pre-build Perl scripts");
    if (!skip_dll_export) {
        perl.dependOn(&perl_dll_export.step);
    }
    perl.dependOn(&perl_xml_validation.step);
    // perl.dependOn(&perl_cpp_line_checker.step);
    perl.dependOn(&perl_xml_enum_global_types.step);
    perl.dependOn(&perl_xml_enum_gen.step);
    perl.dependOn(&perl_variable_setup.step);
    perl.dependOn(&generate_auto_git_version_h.step);

    const dll = b.addSharedLibrary(.{
        .name = "CvGameCoreDLL",
        .target = target,
        .optimize = optimize,
        .use_llvm = use_llvm,
        .use_lld = use_lld,
    });
    dll.emit_implib = .no_emit;
    dll.override_dest_dir = .lib;
    b.installArtifact(dll);
    // dll.output_path_source;
    configure(dll, hardcoded_xml, sanitize, final_release, profiling, oos_logging);
    dll.step.dependOn(perl);

    const combine_compile_commands_exe = b.addExecutable(.{
        .name = "combine_compile_commands",
        .root_source_file = .{ .path = "./Project Files/bin/combine_compile_commands.zig" },
        .optimize = .ReleaseSafe,
    });

    const combine_compile_commands = b.addRunArtifact(combine_compile_commands_exe);
    const comp_db = combine_compile_commands.captureStdOut();
    const install_comp_db = b.addWriteFiles();
    install_comp_db.addCopyFileToSource(comp_db, "compile_commands.json");
    const comp_db_step = b.step("comp_db", "Create compile_commands.json for tooling support");
    comp_db_step.dependOn(&install_comp_db.step);
    if (emit_compdb) {
        b.install_tls.step.dependOn(&install_comp_db.step);
    }

    const tmp_comp_db_dir = try b.cache_root.join(b.allocator, &[_][]const u8{"tmp_comp_db"});
    try b.cache_root.handle.makePath("tmp_comp_db");

    for (dll_sources) |cpp_path| {
        const cpp_name = std.fs.path.basename(cpp_path);

        // We need a static output path that's unique but consistent for each source file to properly cache it.
        const comp_db_name = b.fmt("{s}.json", .{cpp_name});
        const tmp_comp_db_path = b.pathJoin(&[_][]const u8{ tmp_comp_db_dir, comp_db_name });
        dll.addCSourceFile(cpp_path, cpp_flags ++ &[_][]const u8{
            b.fmt("-MJ{s}", .{tmp_comp_db_path}),
        });

        const cached_comp_db = b.addWriteFiles();
        cached_comp_db.addCopyFile(std.Build.FileSource{ .path = tmp_comp_db_path }, comp_db_name);
        cached_comp_db.step.dependOn(&dll.step);

        combine_compile_commands.addFileSourceArg(cached_comp_db.getFileSource(comp_db_name).?);
    }

    for (library_paths) |library_path| {
        dll.addLibraryPath(library_path);
    }

    dll.linkSystemLibrary("msvcrt");
    dll.linkSystemLibrary("msvcprt");
    dll.linkSystemLibrary("oldnames"); // TODO: Can this be replaced by `/ALTERNATENAME`?

    dll.linkSystemLibrary("kernel32");
    dll.linkSystemLibrary("winmm");
    dll.linkSystemLibrary("user32");
    dll.linkSystemLibrary("shell32");

    dll.linkSystemLibrary("boost_python-vc71-mt-1_32");
    dll.linkSystemLibrary("python24");

    dll.linkSystemLibrary("tbb");
    dll.linkSystemLibrary("tbbmalloc");

    // Clang is generating calls to the new C++ exception handler, but MSVC++ 2003 does not provide the new one.
    // Instead, we're just creating a shim handler that calls MSVC++ 2003's.
    const shim = b.addObject(.{
        .name = "shim",
        .root_source_file = .{ .path = "./Project Files/DLLSources/shim.zig" },
        .target = target,
        // Allowing `.Debug` will try importing things that we don't have.
        .optimize = .ReleaseFast,
    });
    dll.addObject(shim);

    dll.strip = false;

    // TODO: Replace with more proper installation step, probably using prefix
    // const copy_dll = b.addSystemCommand(&.{"cp"});
    // copy_dll.addFileSourceArg(dll.getOutputSource());
    // copy_dll.addFileSourceArg(dll.getOutputPdbSource());
    // copy_dll.addArg("/home/wrs/.local/share/Steam/steamapps/common/Civilization IV Colonization/Mods/WeThePeople/Assets/");
    // copy_dll.setName("Copy CvGameCoreDLL into Mods/WeThePeople");

    // b.default_step.dependOn(&copy_dll.step);
}

/// TODO: Clean up `configure` to be separate for compilation and linking.
fn configure(obj: *std.Build.CompileStep, hardcoded_xml: bool, sanitize: bool, final_release: bool, profiling: bool, oos_logging: bool) void {
    // TODO: Figure out how we want to link things.

    obj.linker_dynamicbase = false;
    // obj.dll_export_fns = false;
    // obj.link_gc_sections = true; // TODO: Does this break anything?
    obj.link_function_sections = true;
    obj.want_lto = final_release;
    // obj.omit_frame_pointer = final_release;
    obj.single_threaded = false;

    obj.disable_sanitize_c = !sanitize; //final_release;

    // TODO: Do we need Zig's CRT?
    obj.bundle_compiler_rt = false;

    // TODO: Clean up include paths
    // obj.defineCMacro("NOMINMAX", null);
    // obj.defineCMacro("WIN32_LEAN_AND_MEAN", null);
    obj.addSystemIncludePath("../Compiler/Microsoft SDKs/Windows/v6.0/Include");

    obj.addSystemIncludePath("../Compiler/Microsoft Visual C++ Toolkit 2003/include");

    obj.defineCMacro("uintptr_t", "DWORD_PTR"); // `pyport.h` wants to use `uintptr_t`
    // obj.defineCMacro("MS_NO_COREDLL", null);
    obj.addIncludePath("../Compiler/lib/Python24/include");

    obj.addIncludePath("../Compiler/lib/Boost-1.32.0/include");

    obj.defineCMacro("__TBBMALLOC_NO_IMPLICIT_LINKAGE", null); // Without this, TBB will try linking itself via `#pragma comment(lib, ...)`
    obj.addIncludePath("./Project Files/DLLSources/tbb"); // TODO: Move out of source tree.

    // TODO: Figure out which macro defines are provided by Zig, which are provided by Clang, and which we need to provide.
    obj.defineCMacro("WIN32", null);
    obj.defineCMacro("_WINDOWS", null);
    obj.defineCMacro("_DLL", null);
    obj.defineCMacro("_MT", null);
    // obj.defineCMacro("_UNICODE", null);
    // obj.defineCMacro("UNICODE", null);

    // TODO: Figure out how we want to propagate debug mode to C++ without misconfiguring library include headers.
    if (obj.optimize == .Debug) {
        // obj.defineCMacro("_DEBUG", null);
    } else {
        //
    }

    // TODO: What does this do exactly?
    obj.defineCMacro("CHECK_GLOBAL_CONSTANTS", null);

    if (hardcoded_xml) {
        // TODO: Clean up how `HARDCODE_XML_VALUES` gets handled in the C++.
        obj.defineCMacro("HARDCODE_XML_VALUES", null);
    }

    if (final_release) {
        obj.defineCMacro("FINAL_RELEASE", null);
    } else {
        obj.defineCMacro("FASSERT_ENABLE", null);
    }

    if (profiling) {
        obj.defineCMacro("PROFILING_ENABLED", null);
    }

    if (oos_logging) {
        obj.defineCMacro("GLOBAL_DEFINE_USE_OOS_LOGGING", null);
    }

    // TODO: Do we need/want these? What's the best way to include Boost in this setup?
    // dll.defineCMacro("BOOST_USE_WINDOWS_H", null);
    // dll.defineCMacro("__CORRECT_ISO_CPP_STRING_H_PROTO", null);

    // TODO: Figure out how to best handle `_MSC_VER`. What's the default value for `_MSC_VER` with Clang?
    // obj.defineCMacro("_MSC_VER", "1310");

    // TODO: Consider setting `__INTEL_COMPILER` to convince TBB to not treat us like we're retarded (MSVC).
}

/// Clang flags for compiling each C++ source file.
/// TODO: Split out linker flags from compiler flags.
const cpp_flags = &[_][]const u8{
    // TODO: Update the C++ version once we've cleaned up both the codebase and the Microsoft include headers as well as verified that MSVC++ 2003 is compatible with any language-level changes.
    "-std=c++2b",
    "-Wno-c++11-extensions",
    "-Wno-c++98-compat",

    // TODO: Re-enable these warnings once both the codebase and the Microsoft include headers have been cleaned up to be spec compliant.
    "-Wno-microsoft-extra-qualification",
    "-Wno-microsoft-template-shadow",
    "-Wno-microsoft-template",
    "-Wno-microsoft-enum-forward-reference",
    // TODO: Disable these workarounds once both the cosebase and the Microsoft include headesr have been cleaned up to be spec compliant.
    "-fms-extensions",
    "-fms-compatibility",
    "-fdelayed-template-parsing",

    // TODO: Fix EnumMap code
    "-Wno-deprecated-anon-enum-enum-conversion",

    // TODO: Re-enable these warnings once the codebase isn't shit.
    // "-Wno-c++11-compat-deprecated-writable-strings",
    // "-Wno-deprecated-register",
    // "-Wno-switch",
    // "-Wno-non-pod-varargs",

    // Boost: Unknown compiler version
    // TODO: Also linker flag pragmas?
    "-Wno-#pragma-messages",
    "-Wno-comment",

    // Python
    "-Wno-register",

    // For some reason, Zig is passing an unused argument to Clang.
    // Whenever we change of these flags, we should try disabling this to verify that they're being used as expected.
    // See: https://github.com/ziglang/zig/blob/b677b3627818edc24828f36f8269a3c3843703a1/src/Compilation.zig#L4248
    "-Wno-unused-command-line-argument",

    // Troubleshooting
    // TODO: Remove these before committing.
    "-Wno-everything",
    // "-Weverything",
    // "-Werror",
    // "-ferror-limit=99999999",

    // Resolves missing symbol linker errors
    // MSVC++ 2003 did not have thread-safe initialization of statics
    // TODO: Figure out how to best handle thread bullshit in MSVC++ 2003.
    "-fno-threadsafe-statics",

    // Original Makefile uses MSVC's /EHsc which disables SEH but enables C++ exceptions
    "-fno-async-exceptions",
    "-fcxx-exceptions",
    "-fexceptions", // TODO: Redundant?

    // TODO: Figure out how to enable the LAA flag in the final DLL. Clang/LLD is failing to do so, so we likely need to create a post-build step.
    // "-Wl,--large-address-aware",

    // Zig will automatically define `_DEBUG` and `NDEBUG` anyways, so let's avoid redefining it.
    // See: https://github.com/ziglang/zig/blob/b677b3627818edc24828f36f8269a3c3843703a1/src/Compilation.zig#L4378
    // See: https://github.com/ziglang/zig/blob/b677b3627818edc24828f36f8269a3c3843703a1/src/Compilation.zig#L4391
    "-fno-debug-macro",
};

/// TODO: Figure out where these should be long-term.
const library_paths = &[_][]const u8{
    "../Compiler/Microsoft SDKs/Windows/v6.0/Lib",
    "../Compiler/Microsoft Visual C++ Toolkit 2003/lib",
    "../Compiler/lib/Boost-1.32.0/libs",
    "../Compiler/lib/Python24/libs",
    "./Project Files/tbb",
};

const main_dll_source = "./Project Files/DLLSources/CvGameCoreDLL.cpp";
const dll_sources = &[_][]const u8{
    main_dll_source,
    "./Project Files/DLLSources/AlertWindow.cpp",
    "./Project Files/DLLSources/Autogenerated.cpp",
    "./Project Files/DLLSources/BetterBTSAI.cpp",
    "./Project Files/DLLSources/CvArea.cpp",
    "./Project Files/DLLSources/CvAreaSavegame.cpp",
    "./Project Files/DLLSources/CvArtFileMgr.cpp",
    "./Project Files/DLLSources/CvCity.cpp",
    "./Project Files/DLLSources/CvCityAI.cpp",
    "./Project Files/DLLSources/CvCityAISavegame.cpp",
    "./Project Files/DLLSources/CvCitySavegame.cpp",
    "./Project Files/DLLSources/CvCityYields.cpp",
    "./Project Files/DLLSources/CvDLLButtonPopup.cpp",
    "./Project Files/DLLSources/CvDLLEngineIFaceBase.cpp",
    "./Project Files/DLLSources/CvDLLEntity.cpp",
    "./Project Files/DLLSources/CvDLLInterfaceIFaceBase.cpp",
    "./Project Files/DLLSources/CvDLLPython.cpp",
    "./Project Files/DLLSources/CvDLLWidgetData.cpp",
    "./Project Files/DLLSources/CvDeal.cpp",
    "./Project Files/DLLSources/CvDealSavegame.cpp",
    "./Project Files/DLLSources/CvDiploParameters.cpp",
    "./Project Files/DLLSources/CvDiploParametersSavegames.cpp",
    "./Project Files/DLLSources/CvFractal.cpp",
    "./Project Files/DLLSources/CvGame.cpp",
    "./Project Files/DLLSources/CvGameAI.cpp",
    "./Project Files/DLLSources/CvGameAISavegame.cpp",
    "./Project Files/DLLSources/CvGameCoreUtils.cpp",
    "./Project Files/DLLSources/CvGameSavegame.cpp",
    "./Project Files/DLLSources/CvGameTextMgr.cpp",
    "./Project Files/DLLSources/CvGlobalConstants.cpp",
    "./Project Files/DLLSources/CvGlobals.cpp",
    "./Project Files/DLLSources/CvGlobalsEnumSetup.cpp",
    "./Project Files/DLLSources/CvHallOfFameInfo.cpp",
    "./Project Files/DLLSources/CvInfoWater.cpp",
    "./Project Files/DLLSources/CvInfos.cpp",
    "./Project Files/DLLSources/CvInitCore.cpp",
    "./Project Files/DLLSources/CvMap.cpp",
    "./Project Files/DLLSources/CvMapGenerator.cpp",
    "./Project Files/DLLSources/CvMapSavegame.cpp",
    "./Project Files/DLLSources/CvPlayer.cpp",
    "./Project Files/DLLSources/CvPlayerAI.cpp",
    "./Project Files/DLLSources/CvPlayerAISavegame.cpp",
    "./Project Files/DLLSources/CvPlayerCivEffect.cpp",
    "./Project Files/DLLSources/CvPlayerSavegame.cpp",
    "./Project Files/DLLSources/CvPlot.cpp",
    "./Project Files/DLLSources/CvPlotFunctions.cpp",
    "./Project Files/DLLSources/CvPlotSavegame.cpp",
    "./Project Files/DLLSources/CvPopupInfo.cpp",
    "./Project Files/DLLSources/CvPopupInfoSavegame.cpp",
    "./Project Files/DLLSources/CvPopupReturn.cpp",
    "./Project Files/DLLSources/CvRandom.cpp",
    "./Project Files/DLLSources/CvReplayInfo.cpp",
    "./Project Files/DLLSources/CvReplayMessage.cpp",
    "./Project Files/DLLSources/CvReplayMessageSavegame.cpp",
    "./Project Files/DLLSources/CvSavegame.cpp",
    "./Project Files/DLLSources/CvSelectionGroup.cpp",
    "./Project Files/DLLSources/CvSelectionGroupAI.cpp",
    "./Project Files/DLLSources/CvSelectionGroupAISavegame.cpp",
    "./Project Files/DLLSources/CvSelectionGroupSavegame.cpp",
    "./Project Files/DLLSources/CvStructs.cpp",
    "./Project Files/DLLSources/CvTalkingHeadMessage.cpp",
    "./Project Files/DLLSources/CvTalkingHeadMessageSavegame.cpp",
    "./Project Files/DLLSources/CvTeam.cpp",
    "./Project Files/DLLSources/CvTeamAI.cpp",
    "./Project Files/DLLSources/CvTeamAISavegame.cpp",
    "./Project Files/DLLSources/CvTeamSavegame.cpp",
    "./Project Files/DLLSources/CvTradeRoute.cpp",
    "./Project Files/DLLSources/CvTradeRouteGroup.cpp",
    "./Project Files/DLLSources/CvTradeRouteGroupSavegame.cpp",
    "./Project Files/DLLSources/CvTradeRouteSavegame.cpp",
    "./Project Files/DLLSources/CvUnit.cpp",
    "./Project Files/DLLSources/CvUnitAI.cpp",
    "./Project Files/DLLSources/CvUnitAISavegame.cpp",
    "./Project Files/DLLSources/CvUnitSavegame.cpp",
    "./Project Files/DLLSources/CvXMLLoadUtility.cpp",
    "./Project Files/DLLSources/CvXMLLoadUtilityGet.cpp",
    "./Project Files/DLLSources/CvXMLLoadUtilityInit.cpp",
    "./Project Files/DLLSources/CvXMLLoadUtilitySet.cpp",
    "./Project Files/DLLSources/CyArea.cpp",
    "./Project Files/DLLSources/CyAreaInterface.cpp",
    "./Project Files/DLLSources/CyArgsList.cpp",
    "./Project Files/DLLSources/CyArtFileMgr.cpp",
    "./Project Files/DLLSources/CyArtFileMgrInterface.cpp",
    "./Project Files/DLLSources/CyCity.cpp",
    "./Project Files/DLLSources/CyCityInterface1.cpp",
    "./Project Files/DLLSources/CyCityInterface2.cpp",
    "./Project Files/DLLSources/CyCityInterface3.cpp",
    "./Project Files/DLLSources/CyCityInterface4.cpp",
    "./Project Files/DLLSources/CyCityInterface5.cpp",
    "./Project Files/DLLSources/CyData.cpp",
    "./Project Files/DLLSources/CyDataInterface.cpp",
    "./Project Files/DLLSources/CyDeal.cpp",
    "./Project Files/DLLSources/CyDealInterface.cpp",
    "./Project Files/DLLSources/CyEnumsInterface.cpp",
    "./Project Files/DLLSources/CyGame.cpp",
    "./Project Files/DLLSources/CyGameCoreUtils.cpp",
    "./Project Files/DLLSources/CyGameCoreUtilsInterface.cpp",
    "./Project Files/DLLSources/CyGameInterface1.cpp",
    "./Project Files/DLLSources/CyGameInterface2.cpp",
    "./Project Files/DLLSources/CyGameInterface3.cpp",
    "./Project Files/DLLSources/CyGameTextMgr.cpp",
    "./Project Files/DLLSources/CyGameTextMgrInterface.cpp",
    "./Project Files/DLLSources/CyGlobalContext.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface1.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface2.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface3.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface4.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface5.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface6.cpp",
    "./Project Files/DLLSources/CyGlobalContextInterface7.cpp",
    "./Project Files/DLLSources/CyHallOfFameInfo.cpp",
    "./Project Files/DLLSources/CyHallOfFameInterface.cpp",
    "./Project Files/DLLSources/CyInfoInterface1.cpp",
    "./Project Files/DLLSources/CyInfoInterface2.cpp",
    "./Project Files/DLLSources/CyInfoInterface3.cpp",
    "./Project Files/DLLSources/CyInfos.cpp",
    "./Project Files/DLLSources/CyMap.cpp",
    "./Project Files/DLLSources/CyMapGenerator.cpp",
    "./Project Files/DLLSources/CyMapGeneratorInterface.cpp",
    "./Project Files/DLLSources/CyMapInterface1.cpp",
    "./Project Files/DLLSources/CyMapInterface2.cpp",
    "./Project Files/DLLSources/CyPlayer.cpp",
    "./Project Files/DLLSources/CyPlayerInterface1.cpp",
    "./Project Files/DLLSources/CyPlayerInterface2.cpp",
    "./Project Files/DLLSources/CyPlayerInterface3.cpp",
    "./Project Files/DLLSources/CyPlayerInterface4.cpp",
    "./Project Files/DLLSources/CyPlot.cpp",
    "./Project Files/DLLSources/CyPlotInterface1.cpp",
    "./Project Files/DLLSources/CyPlotInterface2.cpp",
    "./Project Files/DLLSources/CyRandomInterface.cpp",
    "./Project Files/DLLSources/CyReplayInfo.cpp",
    "./Project Files/DLLSources/CySelectionGroup.cpp",
    "./Project Files/DLLSources/CySelectionGroupInterface.cpp",
    "./Project Files/DLLSources/CyStructsInterface1.cpp",
    "./Project Files/DLLSources/CyTeam.cpp",
    "./Project Files/DLLSources/CyTeamInterface.cpp",
    "./Project Files/DLLSources/CyTradeRoute.cpp",
    "./Project Files/DLLSources/CyTradeRouteGroup.cpp",
    "./Project Files/DLLSources/CyTradeRouteGroupInterface.cpp",
    "./Project Files/DLLSources/CyTradeRouteInterface.cpp",
    "./Project Files/DLLSources/CyUnit.cpp",
    "./Project Files/DLLSources/CyUnitInterface1.cpp",
    "./Project Files/DLLSources/CyUnitInterface2.cpp",
    "./Project Files/DLLSources/CyUserSettings.cpp",
    "./Project Files/DLLSources/CyUserSettingsInterface.cpp",
    "./Project Files/DLLSources/EXE_interface.cpp",
    "./Project Files/DLLSources/FAssert.cpp",
    "./Project Files/DLLSources/FDialogTemplate.cpp",
    "./Project Files/DLLSources/InfoArray.cpp",
    "./Project Files/DLLSources/JustInTimeArray.cpp",
    "./Project Files/DLLSources/JustInTime_Features.cpp",
    "./Project Files/DLLSources/KmodPathFinder.cpp",
    "./Project Files/DLLSources/OpenURL.cpp",
    "./Project Files/DLLSources/PlayerHelperFunctions.cpp",
    "./Project Files/DLLSources/Profile.cpp",
    "./Project Files/DLLSources/StartupErrorChecking.cpp",
    "./Project Files/DLLSources/TestEnumMap.cpp",
    "./Project Files/DLLSources/UserSettings.cpp",
    "./Project Files/DLLSources/XMLLengthSet.cpp",
    "./Project Files/DLLSources/_precompile.cpp",
    "./Project Files/DLLSources/tinyxml2.cpp",
};
